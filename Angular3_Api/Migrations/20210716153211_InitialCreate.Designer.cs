// <auto-generated />
using System;
using Angular3_Api.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Angular3_Api.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20210716153211_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Angular3_Api.Models.DetailOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("DetailsOrder");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            ProductId = 1L,
                            Quantity = 10,
                            Subtotal = 100m
                        });
                });

            modelBuilder.Entity("Angular3_Api.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Pickup")
                        .HasColumnType("boolean");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Barcelona",
                            Date = "01/12/1995",
                            Name = "Dominicode",
                            Pickup = false,
                            ShippingAddress = "Av. de la Granvia de Hospitalet, 115",
                            Total = 20.40m
                        },
                        new
                        {
                            Id = 2L,
                            Date = "01/12/1995",
                            Name = "Dominicode",
                            Pickup = true,
                            StoreId = 1L,
                            Total = 105.30m
                        });
                });

            modelBuilder.Entity("Angular3_Api.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Learn the essentials and more of TypeScript, a popular superset of the JavaScript language that adds support for static typing. TypeScript combines the typing features of C# or Java.",
                            Name = "Essential TypeScript 4: From Beginner to Pro",
                            Price = 45m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "En Hackeando del cerebro de tus compradores, Corti nos revela cómo muchas compañías crean productos digitales o procesos de venta capaces de conectar con la psicología del comprador.",
                            Name = "Hackeando el cerebro de tus compradores: PsychoGrowth",
                            Price = 5m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 3L,
                            Description = "In this book, the reader will be able to focus on one concept of Angular in deep.",
                            Name = "Angular Routing: Learn To Create client-side and SPA with Routing and Navigation",
                            Price = 17m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Ideal for Android smartphones and tablets, and MIL cameras. SanDisk Memory Zone app for easy file management (Download and Installation Required).",
                            Name = "SanDisk 128GB Ultra MicroSDXC UHS-I Memory Card with Adapter",
                            Price = 19m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 5L,
                            Description = "5K Video - Shoot stunning video with up to 5K resolution, perfect for maintaining detail even when zooming in",
                            Name = "GoPro HERO9 Black - Waterproof Action Camera with Front LCD",
                            Price = 399m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 6L,
                            Description = "HDMI A Male to A Male Cable: Supports Ethernet, 3D, 4K video and Audio Return Channel (ARC)",
                            Name = "CL3 Rated High-Speed 4K HDMI Cable - 6 Feet",
                            Price = 7m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 7L,
                            Description = "The USB receiver is conveniently located in the box, top flap. This wireless keyboard and mouse feature Logitech Advanced 2.4GHz technology with a range of up to 10 metres.",
                            Name = "Logitech MK270 Wireless Keyboard and Mouse Combo",
                            Price = 32m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Plug & play. Easy to use,powered by USB port. No external driver and Power needed. Just plug it into your USB port and the DVD driver will be detected",
                            Name = "External CD Drive USB 3.0 Portable CD DVD +/-RW Drive DVD/CD ROM",
                            Price = 20m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("Angular3_Api.Models.Store", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OpeningHours")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "38 Park Row",
                            City = "New York",
                            Name = "Park Row at Beekman St",
                            OpeningHours = "10:00 - 14:00 and 17:00 - 20:30"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Calle de Alcalá, 21",
                            City = "Madrid",
                            Name = "Store Alcalá",
                            OpeningHours = "10:00 - 14:00 and 17:00 - 20:30"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "125 Chambers Street",
                            City = "New York",
                            Name = "Chambers and West Broadway",
                            OpeningHours = "10:00 - 14:00 and 17:00 - 20:30"
                        },
                        new
                        {
                            Id = 4L,
                            Address = "10 Russell Street",
                            City = "London",
                            Name = "Covent Garden - Russell St",
                            OpeningHours = "10:00 - 14:00 and 17:00 - 20:30"
                        },
                        new
                        {
                            Id = 5L,
                            Address = "11 Monmouth Street",
                            City = "London",
                            Name = "Monmouth St",
                            OpeningHours = "10:00 - 14:00 and 17:00 - 20:30"
                        });
                });

            modelBuilder.Entity("Angular3_Api.Models.DetailOrder", b =>
                {
                    b.HasOne("Angular3_Api.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Angular3_Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Angular3_Api.Models.Order", b =>
                {
                    b.HasOne("Angular3_Api.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });
#pragma warning restore 612, 618
        }
    }
}
